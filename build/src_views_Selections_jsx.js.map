{"version":3,"file":"src_views_Selections_jsx.js","mappings":"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","sources":["webpack://orb-services/./src/views/Selections.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { fetchServices } from '../controllers/servicesSlice.js';\nimport { getClient } from '../controllers/clientSlice.js';\nimport {\n  addSelections,\n  calculateSelections,\n  createQuote,\n  finalizeQuote,\n  getClientQuotes,\n  getStripeQuote,\n  updateQuoteID,\n  updateQuote,\n  getQuote,\n} from '../controllers/quoteSlice.js';\n\nfunction SelectionsComponent() {\n  const { servicesLoading, servicesError, services } = useSelector(\n    (state) => state.services\n  );\n  const { user_email, stripe_customer_id } = useSelector(\n    (state) => state.client\n  );\n  const {\n    loading,\n    quotes,\n    quoteError,\n    quote_id,\n    status,\n    selections,\n    total,\n    stripe_quote_id,\n  } = useSelector((state) => state.quote);\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const [checkedItems, setCheckedItems] = useState([]);\n\n  useEffect(() => {\n    if (user_email) {\n      dispatch(getClient());\n    }\n  }, [user_email, dispatch]);\n\n  useEffect(() => {\n    if (stripe_customer_id) {\n      dispatch(fetchServices());\n    }\n  }, [stripe_customer_id, dispatch]);\n\n  const handleCheckboxChange = (event, price_id, description, cost) => {\n    const isChecked = event.target.checked;\n\n    setCheckedItems((prevItems) => {\n      if (isChecked) {\n        const newItem = { price_id, description, cost };\n        return [...prevItems, newItem];\n      } else {\n        return prevItems.filter((item) => item.price_id !== price_id);\n      }\n    });\n  };\n\n  useEffect(() => {\n    dispatch(addSelections(checkedItems));\n  }, [dispatch, checkedItems]);\n\n  useEffect(() => {\n    dispatch(calculateSelections(services.cost));\n  }, [dispatch, services.cost, checkedItems]);\n\n  const handleClick = async () => {\n    if (selections.length > 0) {\n      dispatch(createQuote(selections));\n    }\n  };\n\n  useEffect(() => {\n    if (stripe_quote_id) {\n      dispatch(finalizeQuote());\n    }\n  }, [stripe_quote_id, dispatch]);\n\n  useEffect(() => {\n    if ((quote_id && status === 'open') || status === 'accepted') {\n      window.location.href = `/services/quote/${quote_id}`;\n    }\n  }, [quote_id, status]);\n\n  if (servicesError) {\n    return (\n      <main className=\"error\">\n        <div className=\"status-bar card\">\n          <span className=\"error\">\n            There was an error loading the available services at this time.\n          </span>\n        </div>\n      </main>\n    );\n  }\n\n  if (servicesLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <>\n      <h2>SELECTIONS</h2>\n\n      <div className=\"quote-card card\">\n        <table>\n          <thead>\n            <tr>\n              <th colSpan={2}>\n                <h4 className=\"description-label\">DESCRIPTION</h4>\n              </th>\n              <th>\n                <h4 className=\"cost-label\">COST</h4>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {services && services.length ? (\n              <React.Fragment>\n                {services.map((service) => {\n                  const { price_id, description, cost } = service;\n\n                  return (\n                    <tr key={price_id} id=\"quote_option\">\n                      <td>\n                        <input\n                          className=\"input selection feature-selection\"\n                          type=\"checkbox\"\n                          name=\"quote[checkbox][]\"\n                          checked={checkedItems.some(\n                            (item) => item.price_id === price_id\n                          )}\n                          onChange={(event) =>\n                            handleCheckboxChange(\n                              event,\n                              price_id,\n                              description,\n                              cost\n                            )\n                          }\n                        />\n                      </td>\n                      <td className=\"feature-description\">{description}</td>\n                      <td\n                        className=\"feature-cost table-number\"\n                        id=\"feature_cost\">\n                        {new Intl.NumberFormat('us', {\n                          style: 'currency',\n                          currency: 'USD',\n                        }).format(cost)}\n                      </td>\n                    </tr>\n                  );\n                })}\n              </React.Fragment>\n            ) : (\n              <tr>\n                <td colSpan={3}>\n                  <h3>No features to show yet</h3>\n                </td>\n              </tr>\n            )}\n          </tbody>\n          <tfoot>\n            <tr>\n              <th colSpan={2}>\n                <h4 className=\"subtotal-label\">TOTAL</h4>\n              </th>\n              <th>\n                <h4 className=\"subtotal\">\n                  {new Intl.NumberFormat('us', {\n                    style: 'currency',\n                    currency: 'USD',\n                  }).format(total)}\n                </h4>\n              </th>\n            </tr>\n          </tfoot>\n        </table>\n      </div>\n\n      {quoteError && (\n        <div className={`status-bar card error`}>\n          <span>{quoteError}</span>\n        </div>\n      )}\n\n      <button onClick={handleClick}>\n        <h3>QUOTE</h3>\n      </button>\n    </>\n  );\n}\n\nexport default SelectionsComponent;\n"],"names":["React","useEffect","useState","useNavigate","useSelector","useDispatch","fetchServices","getClient","addSelections","calculateSelections","createQuote","finalizeQuote","getClientQuotes","getStripeQuote","updateQuoteID","updateQuote","getQuote","SelectionsComponent","servicesLoading","servicesError","services","state","user_email","stripe_customer_id","client","loading","quotes","quoteError","quote_id","status","selections","total","stripe_quote_id","quote","dispatch","navigate","checkedItems","setCheckedItems","handleCheckboxChange","event","price_id","description","cost","isChecked","target","checked","prevItems","newItem","filter","item","handleClick","length","window","location","href","createElement","className","Fragment","colSpan","map","service","key","id","type","name","some","onChange","Intl","NumberFormat","style","currency","format","onClick"],"sourceRoot":""}