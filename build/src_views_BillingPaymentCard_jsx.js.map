{"version":3,"file":"src_views_BillingPaymentCard_jsx.js","mappings":"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","sources":["webpack://orb-services/./src/error/ErrorComponent.jsx","webpack://orb-services/./src/loading/LoadingComponent.jsx","webpack://orb-services/./src/utils/DisplayStatus.js","webpack://orb-services/./src/utils/PaymentMethod.js","webpack://orb-services/./src/views/BillingPaymentCard.jsx","webpack://orb-services/./src/views/components/StatusBar.jsx","webpack://orb-services/./src/views/payment/Navigation.jsx"],"sourcesContent":["function ErrorComponent(props) {\n  const { error } = props;\n\n  return (\n    <main className='error'>\n      <div className=\"status-bar card error\">\n        <span>{error}</span>\n      </div>\n    </main>\n  );\n}\n\nexport default ErrorComponent;\n","function LoadingComponent() {\n  return (\n    <div className=\"loading\">\n      <h1>Loading......</h1>\n    </div>\n  );\n}\n\nexport default LoadingComponent;\n","export const displayStatus = (status) => {\n\n  if (status === \"requires_payment_method\") {\n    return 'Choose a payment method'\n  }\n\n  if (status === 'succeeded') {\n    return 'Your transaction was successful. Thank you. ';\n  }\n\n  if (status === 'processing') {\n    return `This transaction is currently processing you may revisit this page at a later time for an update and a confirmation email will be sent.`;\n  }\n\n  if (\n    status === 'requires_confirmation' ||\n    status === 'requires_action' ||\n    status === 'requires_capture'\n  ) {\n  }\n\n  if (status === 'canceled') {\n    return 'This transaction has been canceled';\n  }\n\n  return status;\n};\n\nexport const displayStatusType = (status) => {\n  if (status === 'succeeded') {\n    return 'success';\n  }\n\n  if (\n    status === 'processing' ||\n    status === 'requires_confirmation' ||\n    status === 'requires_action' ||\n    status === 'requires_capture'\n  ) {\n    return 'caution';\n  }\n\n  if (status === 'canceled') {\n    return 'error';\n  }\n\n  return status;\n};\n","export function PaymentMethodGenerator(payment_method) {\n    let paymentMethod = '';\n  \n    if (payment_method) {\n      const paymentType = payment_method.type;\n      const paymentCard = payment_method.card;\n      const paymentFundingType = paymentCard.funding;\n      const paymentBrand = paymentCard.brand;\n      const country = paymentCard.country;\n      const last4 = paymentCard.last4;\n      const wallet = payment_method.wallet;\n  \n      if (paymentType === 'card') {\n        paymentMethod = `${\n          paymentFundingType !== 'unknown' ? paymentFundingType : ''\n        } ${paymentType} ${country} ${paymentBrand} ${last4}`;\n      } else if (paymentType === 'wallet' && wallet !== null) {\n        paymentMethod = wallet;\n      } else {\n        paymentMethod = paymentType;\n      }\n  \n      if (payment_method.card_present) {\n        const cardPresent = payment_method.card_present;\n        const cardPresentFunding = cardPresent.card_present;\n        const cardPresentBrand = cardPresent.brand;\n        const cardPresentCountry = cardPresent.country;\n        const cardPresentLast4 = cardPresent.last4;\n  \n        paymentMethod = `${\n          cardPresentFunding !== 'unknown' ? cardPresentFunding : ''\n        } ${paymentType} ${cardPresentCountry} ${cardPresentBrand} ${cardPresentLast4}`;\n      }\n    }\n    \n    return paymentMethod;\n  }\n  ","import React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport PaymentNavigationComponent from './payment/Navigation';\n\nimport { getClient } from '../controllers/clientSlice';\nimport {\n  getInvoiceByID,\n  getStripeInvoice,\n  updateInvoiceStatus,\n} from '../controllers/invoiceSlice';\nimport { getPaymentIntent } from '../controllers/paymentSlice';\nimport {\n  postReceipt,\n  getPaymentMethod,\n  updatePaymentMethod,\n} from '../controllers/receiptSlice';\n\nimport { displayStatus, displayStatusType } from '../utils/DisplayStatus';\nimport { PaymentMethodGenerator } from '../utils/PaymentMethod';\n\n// Stripe\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\n\nimport LoadingComponent from '../loading/LoadingComponent';\nimport ErrorComponent from '../error/ErrorComponent.jsx';\nimport StatusBar from '../views/components/StatusBar';\n\nconst CardPaymentComponent = () => {\n  const { id } = useParams();\n\n  const [messageType, setMessageType] = useState('info');\n  const [message, setMessage] = useState(\n    'Please enter your card number, expiration date and the code on the back.'\n  );\n\n  const { user_email, first_name, last_name, stripe_customer_id } = useSelector(\n    (state) => state.client\n  );\n  const {\n    stripe_invoice_id,\n    payment_intent_id,\n    status,\n    amount_paid,\n    remaining_balance,\n  } = useSelector((state) => state.invoice);\n  const { loading, paymentError, client_secret } = useSelector(\n    (state) => state.payment\n  );\n  const { receipt_id, payment_method, brand, last4 } = useSelector(\n    (state) => state.receipt\n  );\n\n  // Setup so card displays input\n  const [cardNumber, setCardNumber] = useState('');\n  const [validThruMonth, setValidThruMonth] = useState('');\n  const [validThruYear, setValidThruYear] = useState('');\n  const [CVC, setCVC] = useState('');\n\n  const [paymentMethodID, setPaymentMethodID] = useState('');\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  useEffect(() => {\n    if (user_email) {\n      dispatch(getClient(user_email));\n    }\n  }, [user_email, dispatch]);\n\n  useEffect(() => {\n    if (stripe_customer_id) {\n      dispatch(getInvoiceByID(id, stripe_customer_id));\n    }\n  }, [dispatch, id, stripe_customer_id]);\n\n  useEffect(() => {\n    if (stripe_invoice_id) {\n      dispatch(getStripeInvoice(stripe_invoice_id));\n    }\n  }, [dispatch, stripe_invoice_id]);\n\n  useEffect(() => {\n    if (payment_intent_id) {\n      dispatch(getPaymentIntent(payment_intent_id));\n    }\n  }, [dispatch, payment_intent_id]);\n\n  // useEffect(() => {\n  //   if (status) {\n  //     dispatch(updateInvoiceStatus());\n  //   }\n  // }, [dispatch, status]);\n\n  // useEffect(() => {\n  //   if (status) {\n  //     setMessage(displayStatus(status));\n  //     setMessageType(displayStatusType(status));\n  //   }\n  // }, [status]);\n\n  // useEffect(() => {\n  //   if (receipt_id) {\n  //     navigate(`/services/receipt/${receipt_id}`);\n  //   }\n  // }, [receipt_id, navigate]);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    if (!stripe || !elements) {\n      return;\n    }\n\n    const result = await stripe.confirmCardPayment(client_secret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n      },\n    });\n\n    if (result.error) {\n      setMessage(result.error.message);\n      setMessageType('error');\n    }\n\n    if (result.paymentIntent) {\n      let status = result.paymentIntent.status;\n\n      setMessage(displayStatus(status));\n      setMessageType(displayStatusType(status));\n\n      dispatch(getPaymentMethod(result.paymentIntent.payment_method));\n    }\n  };\n\n  useEffect(() => {\n    if (brand !== '' && last4 !== '') {\n      const paymentMethodCard = `${brand} - ${last4}`;\n      dispatch(updatePaymentMethod(PaymentMethodGenerator(payment_method)));\n    }\n  }, [dispatch, brand, last4]);\n\n  useEffect(() => {\n    if (payment_method && stripe_invoice_id) {\n      dispatch(getStripeInvoice(stripe_invoice_id));\n    }\n  }, [dispatch, payment_method]);\n\n  useEffect(() => {\n    if (status === 'paid') {\n      dispatch(postReceipt());\n    }\n  }, [dispatch, status]);\n\n  if (paymentError) {\n    return <ErrorComponent error={paymentError} />;\n  }\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  return (\n    <>\n      <PaymentNavigationComponent />\n\n      <div className=\"debit-credit-card card\">\n        <div className=\"front\">\n          <div className=\"image\">\n            <img src=\"\" alt=\"\" />\n            <img src=\"\" alt=\"\" />\n          </div>\n          <div className=\"card-number-box\">\n            {cardNumber ? cardNumber : '#### #### #### ####'}\n          </div>\n          <div className=\"flexbox\">\n            <div className=\"box\">\n              <div className=\"card-holder-name\">\n                {first_name} {last_name}\n              </div>\n            </div>\n\n            <div className=\"box\">\n              <span>VALID THRU</span>\n              <div className=\"expiration\">\n                <span className=\"exp-month\">Month</span> /\n                <span className=\"exp-year\">Year</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"back\">\n          <div className=\"box\">\n            <span>cvv</span>\n            <div className=\"cvv-box\"></div>\n            <img src=\"\" alt=\"\" />\n          </div>\n        </div>\n      </div>\n\n      <form className=\"stripe-card card\" onSubmit={handleSubmit}>\n        <CardElement />\n      </form>\n\n      <StatusBar message={message} messageType={messageType} />\n\n      {client_secret ? (\n        <button type=\"submit\" disabled={!stripe} onClick={handleSubmit}>\n          <h3>PAY</h3>\n        </button>\n      ) : (\n        ''\n      )}\n    </>\n  );\n};\n\nexport default CardPaymentComponent;\n","function StatusBar(props) {\n  const { message, messageType } = props;\n\n  return (\n    <>\n      {message && (\n        <div className={`status-bar card ${messageType}`}>\n          <span>{message}</span>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default StatusBar;\n","import { NavLink } from 'react-router-dom';\nimport {\n  useNavigate,\n  useParams,\n} from 'react-router-dom';\n\nfunction PaymentNavigationComponent() {\n  const { id } = useParams();\n\n  return (\n    <>      \n      <div className=\"payment-options\">\n        <NavLink to={`/billing/payment/mobile/${id}`}>\n          <button className=\"mobile-btn\" id=\"mobile-btn\">\n            <h3>MOBILE</h3>\n          </button>\n        </NavLink>\n\n        <NavLink to={`/billing/payment/card/${id}`}>\n          <button className=\"debit-credit-btn\" id=\"debit-credit-btn\">\n            <h3>CARD</h3>\n          </button>\n        </NavLink>\n      </div>\n    </>\n  );\n}\n\nexport default PaymentNavigationComponent;\n"],"names":["ErrorComponent","props","error","createElement","className","LoadingComponent","displayStatus","status","displayStatusType","PaymentMethodGenerator","payment_method","paymentMethod","paymentType","type","paymentCard","card","paymentFundingType","funding","paymentBrand","brand","country","last4","wallet","card_present","cardPresent","cardPresentFunding","cardPresentBrand","cardPresentCountry","cardPresentLast4","React","useEffect","useState","useParams","useNavigate","useSelector","useDispatch","PaymentNavigationComponent","getClient","getInvoiceByID","getStripeInvoice","updateInvoiceStatus","getPaymentIntent","postReceipt","getPaymentMethod","updatePaymentMethod","CardElement","useStripe","useElements","StatusBar","CardPaymentComponent","id","messageType","setMessageType","message","setMessage","user_email","first_name","last_name","stripe_customer_id","state","client","stripe_invoice_id","payment_intent_id","amount_paid","remaining_balance","invoice","loading","paymentError","client_secret","payment","receipt_id","receipt","cardNumber","setCardNumber","validThruMonth","setValidThruMonth","validThruYear","setValidThruYear","CVC","setCVC","paymentMethodID","setPaymentMethodID","dispatch","navigate","stripe","elements","handleSubmit","event","preventDefault","result","confirmCardPayment","getElement","paymentIntent","paymentMethodCard","Fragment","src","alt","onSubmit","disabled","onClick","NavLink","to"],"sourceRoot":""}